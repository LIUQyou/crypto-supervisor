# ────────────────────────────────────────────────────────────────────
# Exchange & stream configuration
# ────────────────────────────────────────────────────────────────────
exchanges:
  binance:
    symbols: [BTC/USDT, ETH/USDT]
    streams: [ticker, aggTrade, depth]   # add / remove as you like
    reconnect_delay: 5                  # base seconds for back‑off

# If you later add another connector file (coinbase.py, kraken.py, …)
# just drop it in the same structure:
#  coinbase:
#    symbols: [BTC-USD, ETH-USD]
#    reconnect_delay: 5

# ────────────────────────────────────────────────────────────────────
# Alert configuration
# ────────────────────────────────────────────────────────────────────
alerts:
  # -------- Price‑move thresholds ----------------------------------
  thresholds:
    pct_24h:        0.05        #  5 % vs 24 h ago
    window_24h_ms:  86400000    # 24 h
    pct_short:      0.01        #  1 % inside short window
    window_short_ms: 300000     # 5 minutes
    cooldown_ms:    600000      # 10 min between identical price alerts

  # -------- Spread / liquidity alert ------------------------------
  spread:
    threshold_bps:  30          # widen > 30 bp
    window_ms:      10000       # consider last 10 s of depth data
    cooldown_ms:    600000      # 10 min

  # -------- Buy‑vs‑sell flow alert ---------------------------------
  flow:
    threshold:      0.6         # 60 % imbalance (|buy-sell| / total)
    bucket_ms:      60000       # 1 min trade buckets
    window_buckets: 3           # last 3 buckets → 3 min window
    min_notional:   100000      # ignore if < $100k traded
    cooldown_ms:    600000      # 10 min

  # -------- SMTP settings -----------------------------------------
  email:
      smtp_host: smtp.gmail.com
      smtp_port: 465
      username: xxx@gmail.com
      password: xxxx
      from_addr: xxx@gmail.com
      to_addrs:
        - xxx@gmail.com
        # - xxx@gmail.com

# ────────────────────────────────────────────────────────────────────
# Storage backend
#   "memory" – keep everything in‑process RAM (default)
#   "redis"  – keep hot window in RAM, evict cold entries to Redis
# ────────────────────────────────────────────────────────────────────
# ───────────────────────────────────────────────────────────
# Storage configuration
#   backend:
#     "memory" – keep everything in‑process RAM
#     "redis"  – keep hot window in RAM; spill cold keys to Redis
#   sink:
#     Optional on‑disk file writer (CSV/Parquet) for offline analysis
# ───────────────────────────────────────────────────────────
storage:
  # —— live key‑value store used by the alerting pipeline ——
  backend: redis                         # choose "memory" or "redis"
  redis_url: redis://localhost:6379/0    # Redis connection string
  max_memory_gb: 8                       # soft RSS limit before spill
  hot_window_hours: 24                   # keep last 24 h in RAM

  # —— optional FileSink for raw‑tick archiving ——
  sink:
    base_dir: "ticks"                    # root folder for output files
    fmt: "parquet"                       # or "csv"
    rotate_minutes: 10                   # roll a new file every 5 min
    max_rows: 0                          # flush earlier if buffer >20 k rows
    compression: "zstd"                  # Parquet compression codec

